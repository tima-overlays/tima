module dist2mean
summary "Broadcast messages using the algorithm distance-to-mean"

require timer
require broadcasting
require neighbors

protocol dst2mean { mode = "udp", port = 10000 }
 
dst2mean messages {
	/* the message to disseminate */
	broadcast { sender, key, payload }   
}

extern int compute_distance_to_mean(string key); 


automaton Timer = TimerTemplate(MainPhase)
automaton BroadcastInitiator = BroadcastExperimenter(MainPhase)
automaton findingNeighbors = FindingNeighbors(BroadcastInitiator)

/**
 * This is the main automaton in the protocol
 */
automaton MainPhase 

	initial state sleeping
	
		// begin the dissemination of a message 
		when ? init_new_broadcast  => sleeping do {
			
			$payloads[ init_new_broadcast.key ] = "This is a message";
			
			! broadcast (sender=$myself, key = init_new_broadcast.key, payload=$payloads[init_new_broadcast.key]) @ *
			
			statistic_message_sent;
			
		}
		
		when ? broadcast => sleeping do {
			$received[ broadcast.key ].from[ broadcast.sender ] = true; 
		
			if (undefined $payloads[broadcast.key]) {
				statistic_message_received;
				$payloads[broadcast.key] = broadcast.payload;
				// time to wait in milliseconds/m 
				! activate_timer (src = broadcast.key, count = 2000000 / $distance[broadcast.sender]) @ Timer
			}
		}
		
		when ? timer_expering => sending_if_needed do 
			$distance_to_mean= compute_distance_to_mean(timer_expering.key)
		
	urgent state sending_if_needed
		when $distance_to_mean > $threshold => sleeping do {
			! broadcast (sender=$myself, key = $key, payload=$payloads[$key]) @ *
			statistic_message_sent;
		}
		
		when $distance_to_mean <= $threshold => sleeping
		
