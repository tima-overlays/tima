[General]
# Some global configuration to make the model simpler

# Limit the simulation to 25s
sim-time-limit = 30s

# Let's configure ARP
# ARP in the real world is used to figure out the MAC address of a node from its IPv4 address.
# We do not want to use it in this wireless tutorial as it just adds some uninteresting 
# message exchanges before the real communication between the nodes can start. We will use 
# the GlobalARP module instead that can automatically provide all the MAC-IP assocoations 
# for the nodes out of band. 
**.arpType = "GlobalARP"
######################################################################################################
[Config Wireless_MWST]
description = Building minimum-weighted spanning tree via UDP/Wireless
network = WirelessSimpleGossip

*.host*.udpApp[0].spontaneously_awaken = true

# Configure an aplication for hostA that sends a constant
# UDP traffic around 800Kbps (+ protocol overhead) 
*.hostAnother.numUdpApps = 1
*.hostAnother.udpApp[0].typename = "MWST2"
*.hostAnother.udpApp[0].addresses = "hostA hostB hostR0 hostR1 hostR2 hostR3 hostR4 hostR5 hostAnother"
*.hostAnother.udpApp[0].destinationPort = 10000
*.hostAnother.udpApp[0].localPort = 10000

*.hostA.numUdpApps = 1
*.hostA.udpApp[0].typename = "MWST2"
#*.hostA.udpApp[0].spontaneously_awaken = true
*.hostA.udpApp[0].extra_options = "isSource=true:rumor=John Snow is alive!!!"
*.hostA.udpApp[0].addresses = "hostA hostB hostR0 hostR1 hostR2 hostR3 hostR4 hostR5 hostAnother"
*.hostA.udpApp[0].destinationPort = 10000
*.hostA.udpApp[0].localPort = 10000

*.host*.numUdpApps = 1
*.host*.udpApp[0].typename = "MWST2"
*.host*.udpApp[0].addresses = "hostA hostB hostR0 hostR1 hostR2 hostR3 hostR4 hostR5 hostAnother"
*.host*.udpApp[0].destinationPort = 10000
*.host*.udpApp[0].localPort = 10000

*.host*.udpApp[0].display_time=4s


*.host*.mobilityType = "LinearMobility"

# Configure the hosts to have a single "ideal" wireless NIC. An IdealWirelessNic
# can be configured with a maximum communication range. All packets withing range
# are always received successfully while out of range messages are never received.
# This is useful if we are not interested how the actual messages get to their destination,
# we just want to be sure that they get there once the nodes are in range.
*.host*.wlan[*].typename = "IdealWirelessNic"

# All radios and MACs should run on 1Mbps in our examples
**.bitrate = 11Mbps

# Mandatory physical layer parameters
*.host*.wlan[*].radio.transmitter.maxCommunicationRange = 100m

# Simplify the IdealWirelessNic even further. We do not care even if there are
# transmission collisions. Any number of nodes in range can transmit at the same time
# and the packets will be still successfully delivered.
*.host*.wlan[*].radio.receiver.ignoreInterference = true

######################################################################################################
[Config test0_mwst]
description = Building minimum-weighted spanning tree via UDP/Wireless
network = test0_mwst

*.host*.udpApp[0].spontaneously_awaken = true


*.host*.numUdpApps = 1
*.host*.udpApp[0].typename = "MWST2"
*.host*.udpApp[0].addresses = "hostR0 hostR1 hostR2"
*.host*.udpApp[0].destinationPort = 10000
*.host*.udpApp[0].localPort = 10000
*.host*.mobilityType = "LinearMobility"

*.host*.udpApp[0].display_time=19s

# Configure the hosts to have a single "ideal" wireless NIC. An IdealWirelessNic
# can be configured with a maximum communication range. All packets withing range
# are always received successfully while out of range messages are never received.
# This is useful if we are not interested how the actual messages get to their destination,
# we just want to be sure that they get there once the nodes are in range.
*.host*.wlan[*].typename = "IdealWirelessNic"

# All radios and MACs should run on 1Mbps in our examples
**.bitrate = 11Mbps

# Mandatory physical layer parameters
*.host*.wlan[*].radio.transmitter.maxCommunicationRange = 100m

# Simplify the IdealWirelessNic even further. We do not care even if there are
# transmission collisions. Any number of nodes in range can transmit at the same time
# and the packets will be still successfully delivered.
*.host*.wlan[*].radio.receiver.ignoreInterference = true

######################################################################################################
[Config test1_mwst]
description = Building minimum-weighted spanning tree via UDP/Wireless
extends = test0_mwst
network = test1_mwst

*.host*.udpApp[0].addresses = "hostR0 hostR1 hostR2 hostR3"

######################################################################################################
[Config complex0_mwst]
description = Building minimum-weighted spanning tree via UDP/Wireless
extends = test0_mwst
network = complex0_mwst

*.host*.udpApp[0].addresses = "hostR0 hostR1 hostR2 hostR3 hostR4 hostR5 hostR6 hostR7"

*.host*.wlan[*].radio.transmitter.maxCommunicationRange = 120m

######################################################################################################
[Config complex1_mwst]
description = Building minimum-weighted spanning tree via UDP/Wireless
extends = complex0_mwst
network = complex1_mwst

*.host*.udpApp[0].addresses = "hostR0 hostR1 hostR2 hostR3 hostR4 hostR5 hostR6 hostR7 hostR8 hostR9 hostR10 hostR11 hostR12 hostR13 hostR14"


######################################################################################################
[Config test0_mwst_tima]
description = Building minimum-weighted spanning tree via UDP/Wireless
network = test0_mwst


*.host*.numUdpApps = 1
*.host*.udpApp[0].typename = "mwst_inet"
*.host*.udpApp[0].addresses = "hostR0 hostR1 hostR2"
*.host*.udpApp[0].destinationPort = 10000
*.host*.udpApp[0].localPort = 10000
*.host*.mobilityType = "LinearMobility"


# Configure the hosts to have a single "ideal" wireless NIC. An IdealWirelessNic
# can be configured with a maximum communication range. All packets withing range
# are always received successfully while out of range messages are never received.
# This is useful if we are not interested how the actual messages get to their destination,
# we just want to be sure that they get there once the nodes are in range.
*.host*.wlan[*].typename = "IdealWirelessNic"

# All radios and MACs should run on 1Mbps in our examples
**.bitrate = 11Mbps

# Mandatory physical layer parameters
*.host*.wlan[*].radio.transmitter.maxCommunicationRange = 100m

# Simplify the IdealWirelessNic even further. We do not care even if there are
# transmission collisions. Any number of nodes in range can transmit at the same time
# and the packets will be still successfully delivered.
*.host*.wlan[*].radio.receiver.ignoreInterference = true

######################################################################################################
[Config test1_mwst_tima]
description = Building minimum-weighted spanning tree via UDP/Wireless
network = test1_mwst
extends = test0_mwst_tima


*.host*.udpApp[0].addresses = "hostR0 hostR1 hostR2 hostR3"


######################################################################################################
[Config test2_mwst_tima]
description = Building minimum-weighted spanning tree via UDP/Wireless
network = WirelessSimpleGossip
extends = test0_mwst_tima


*.host*.udpApp[0].addresses = "hostR0 hostR1 hostR2 hostR3 hostR4 hostR5 hostA hostB hostAnother"

######################################################################################################
[Config complex1_EWMA]
description = Broadcasting a message using EWMA
network = complex1_mwst

*.hostR0.udpApp[0].is_source = true


*.host*.numUdpApps = 1
*.host*.udpApp[0].typename = "EWMA2"
*.host*.udpApp[0].remotePort = 10000
*.host*.udpApp[0].localPort = 10000
*.host*.mobilityType = "LinearMobility"

*.host*.udpApp[0].display_time=19s

# Configure the hosts to have a single "ideal" wireless NIC. An IdealWirelessNic
# can be configured with a maximum communication range. All packets withing range
# are always received successfully while out of range messages are never received.
# This is useful if we are not interested how the actual messages get to their destination,
# we just want to be sure that they get there once the nodes are in range.
*.host*.wlan[*].typename = "IdealWirelessNic"

# All radios and MACs should run on 1Mbps in our examples
**.bitrate = 11Mbps


# Simplify the IdealWirelessNic even further. We do not care even if there are
# transmission collisions. Any number of nodes in range can transmit at the same time
# and the packets will be still successfully delivered.
*.host*.wlan[*].radio.receiver.ignoreInterference = true

# Mandatory physical layer parameters
*.host*.wlan[*].radio.transmitter.maxCommunicationRange = 120m

*.host*.udpApp[0].addresses = "hostR0 hostR1 hostR2 hostR3 hostR4 hostR5 hostR6 hostR7 hostR8 hostR9 hostR10 hostR11 hostR12 hostR13 hostR14"
*.hostR0.udpApp[0].mst = "hostR12 hostR1"
*.hostR2.udpApp[0].mst = "hostR8 hostR3"
*.hostR3.udpApp[0].mst = "hostR13 hostR9"
*.hostR4.udpApp[0].mst = "hostR14"
*.hostR5.udpApp[0].mst = "hostR4"
*.hostR6.udpApp[0].mst = "hostR7"
*.hostR7.udpApp[0].mst = "hostR11"
*.hostR10.udpApp[0].mst = "hostR5"
*.hostR11.udpApp[0].mst = "hostR10"
*.hostR12.udpApp[0].mst = "hostR2"
*.hostR13.udpApp[0].mst = "hostR6"

######################################################################################################
[Config complex1_EWMA_TIMA]
description = Broadcasting a message using EWMA
extends = complex1_EWMA


*.host*.udpApp[0].typename = "ewma_inet"

*.hostR0.udpApp[0].extra_options = "nr_hellos=10:is_source=true:children=hostR12,hostR1"
*.hostR2.udpApp[0].extra_options = "nr_hellos=10:children=hostR8,hostR3"
*.hostR3.udpApp[0].extra_options = "nr_hellos=10:children=hostR13,hostR9"
*.hostR4.udpApp[0].extra_options = "nr_hellos=10:children=hostR14"
*.hostR5.udpApp[0].extra_options = "nr_hellos=10:children=hostR4"
*.hostR6.udpApp[0].extra_options = "nr_hellos=10:children=hostR7"
*.hostR7.udpApp[0].extra_options = "nr_hellos=10:children=hostR11"
*.hostR10.udpApp[0].extra_options = "nr_hellos=10:children=hostR5"
*.hostR11.udpApp[0].extra_options = "nr_hellos=10:children=hostR10"
*.hostR12.udpApp[0].extra_options = "nr_hellos=10:children=hostR2"
*.hostR13.udpApp[0].extra_options = "nr_hellos=10:children=hostR6"
*.hostR1.udpApp[0].extra_options = "nr_hellos=10"
*.hostR8.udpApp[0].extra_options = "nr_hellos=10"
*.hostR14.udpApp[0].extra_options = "nr_hellos=10"
*.hostR9.udpApp[0].extra_options = "nr_hellos=10"
