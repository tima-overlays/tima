//
// Generated file, do not edit! Created by nedtool 4.6 from inet/applications/ewma2/ewmaMsgs.msg.
//

#ifndef _INET__EWMA_EWMAMSGS_M_H_
#define _INET__EWMA_EWMAMSGS_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif

// cplusplus {{
#include "inet/applications/broadcasting/BroadcastingAppBase_m.h"
using inet::broadcasting::Broadcast;
// }}


namespace inet {
namespace ewma {

/**
 * Class generated from <tt>inet/applications/ewma2/ewmaMsgs.msg:25</tt> by nedtool.
 * <pre>
 * packet EWMABroadcast extends inet::broadcasting::Broadcast
 * {
 *     string covered[];
 * }
 * </pre>
 */
class INET_API EWMABroadcast : public ::inet::broadcasting::Broadcast
{
  protected:
    opp_string *covered_var; // array ptr
    unsigned int covered_arraysize;

  private:
    void copy(const EWMABroadcast& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const EWMABroadcast&);

  public:
    EWMABroadcast(const char *name=NULL, int kind=0);
    EWMABroadcast(const EWMABroadcast& other);
    virtual ~EWMABroadcast();
    EWMABroadcast& operator=(const EWMABroadcast& other);
    virtual EWMABroadcast *dup() const {return new EWMABroadcast(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual void setCoveredArraySize(unsigned int size);
    virtual unsigned int getCoveredArraySize() const;
    virtual const char * getCovered(unsigned int k) const;
    virtual void setCovered(unsigned int k, const char * covered);
};

inline void doPacking(cCommBuffer *b, EWMABroadcast& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, EWMABroadcast& obj) {obj.parsimUnpack(b);}

} // namespace ewma
} // namespace inet

#endif // ifndef _INET__EWMA_EWMAMSGS_M_H_

