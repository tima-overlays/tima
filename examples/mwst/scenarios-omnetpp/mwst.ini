[General]
# Some global configuration to make the model simpler

# Limit the simulation to 25s
sim-time-limit = 10s

# Let's configure ARP
# ARP in the real world is used to figure out the MAC address of a node from its IPv4 address.
# We do not want to use it in this wireless tutorial as it just adds some uninteresting 
# message exchanges before the real communication between the nodes can start. We will use 
# the GlobalARP module instead that can automatically provide all the MAC-IP assocoations 
# for the nodes out of band. 
**.arpType = "GlobalARP"
######################################################################################################
[Config Wireless_MWST]
description = Building minimum-weighted spanning tree via UDP/Wireless
network = WirelessSimpleGossip

*.host*.udpApp[0].spontaneously_awaken = true

# Configure an aplication for hostA that sends a constant
# UDP traffic around 800Kbps (+ protocol overhead) 
*.hostAnother.numUdpApps = 1
*.hostAnother.udpApp[0].typename = "MWST2"
*.hostAnother.udpApp[0].addresses = "hostA hostB hostR0 hostR1 hostR2 hostR3 hostR4 hostR5 hostAnother"
*.hostAnother.udpApp[0].destinationPort = 10000
*.hostAnother.udpApp[0].localPort = 10000

*.hostA.numUdpApps = 1
*.hostA.udpApp[0].typename = "MWST2"
#*.hostA.udpApp[0].spontaneously_awaken = true
*.hostA.udpApp[0].extra_options = "isSource=true:rumor=John Snow is alive!!!"
*.hostA.udpApp[0].addresses = "hostA hostB hostR0 hostR1 hostR2 hostR3 hostR4 hostR5 hostAnother"
*.hostA.udpApp[0].destinationPort = 10000
*.hostA.udpApp[0].localPort = 10000

*.host*.numUdpApps = 1
*.host*.udpApp[0].typename = "MWST2"
*.host*.udpApp[0].addresses = "hostA hostB hostR0 hostR1 hostR2 hostR3 hostR4 hostR5 hostAnother"
*.host*.udpApp[0].destinationPort = 10000
*.host*.udpApp[0].localPort = 10000

*.host*.udpApp[0].display_time=4s


*.host*.mobilityType = "LinearMobility"

# Configure the hosts to have a single "ideal" wireless NIC. An IdealWirelessNic
# can be configured with a maximum communication range. All packets withing range
# are always received successfully while out of range messages are never received.
# This is useful if we are not interested how the actual messages get to their destination,
# we just want to be sure that they get there once the nodes are in range.
*.host*.wlan[*].typename = "IdealWirelessNic"

# All radios and MACs should run on 1Mbps in our examples
**.bitrate = 11Mbps

# Mandatory physical layer parameters
*.host*.wlan[*].radio.transmitter.maxCommunicationRange = 100m

# Simplify the IdealWirelessNic even further. We do not care even if there are
# transmission collisions. Any number of nodes in range can transmit at the same time
# and the packets will be still successfully delivered.
*.host*.wlan[*].radio.receiver.ignoreInterference = true

######################################################################################################
[Config test0_mwst]
description = Building minimum-weighted spanning tree via UDP/Wireless
network = test0_mwst

*.host*.udpApp[0].spontaneously_awaken = true


*.host*.numUdpApps = 1
*.host*.udpApp[0].typename = "MWST2"
*.host*.udpApp[0].addresses = "hostR0 hostR1 hostR2"
*.host*.udpApp[0].destinationPort = 10000
*.host*.udpApp[0].localPort = 10000
*.host*.mobilityType = "LinearMobility"

*.host*.udpApp[0].display_time=9s

# Configure the hosts to have a single "ideal" wireless NIC. An IdealWirelessNic
# can be configured with a maximum communication range. All packets withing range
# are always received successfully while out of range messages are never received.
# This is useful if we are not interested how the actual messages get to their destination,
# we just want to be sure that they get there once the nodes are in range.
*.host*.wlan[*].typename = "IdealWirelessNic"

# All radios and MACs should run on 1Mbps in our examples
**.bitrate = 11Mbps

# Mandatory physical layer parameters
*.host*.wlan[*].radio.transmitter.maxCommunicationRange = 100m

# Simplify the IdealWirelessNic even further. We do not care even if there are
# transmission collisions. Any number of nodes in range can transmit at the same time
# and the packets will be still successfully delivered.
*.host*.wlan[*].radio.receiver.ignoreInterference = true

######################################################################################################
[Config test1_mwst]
description = Building minimum-weighted spanning tree via UDP/Wireless
extends = test0_mwst
network = test1_mwst

*.host*.udpApp[0].addresses = "hostR0 hostR1 hostR2 hostR3"

######################################################################################################
[Config complex0_mwst]
description = Building minimum-weighted spanning tree via UDP/Wireless
extends = test0_mwst
network = complex0_mwst

*.host*.udpApp[0].addresses = "hostR0 hostR1 hostR2 hostR3 hostR4 hostR5 hostR6 hostR7"

*.host*.wlan[*].radio.transmitter.maxCommunicationRange = 120m

######################################################################################################
[Config complex1_mwst]
description = Building minimum-weighted spanning tree via UDP/Wireless
extends = complex0_mwst
network = complex1_mwst

*.host*.udpApp[0].addresses = "hostR0 hostR1 hostR2 hostR3 hostR4 hostR5 hostR6 hostR7 hostR8 hostR9 hostR10 hostR11 hostR12 hostR13 hostR14"
