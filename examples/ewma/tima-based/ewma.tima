module ewma
summary "This is an implementation of a distributed algorithm to build a minimum weighted spanning tree"

/* =========================================== */
/* control messages */
/* =========================================== */
local messages {
	msg_wakeup {
		sender
	} 
}


/* =========================================== */ 
/* network messages */
/* =========================================== */
ewma messages {
	/* this one is a trick to find your neighbors  */
	hello {
		sender, x, y
	} 

	/* the message to disseminate */
	broadcast {
		sender, key, payload, covered
	} 
}

automaton MainPhase

  /* the node is not building its local MWST */
	initial state Sleeping
		when ? msg_wakeup ($is_source == "true") => still_sending do {
				initial_dissemination ("This is the message") 
		}
		
		when ? msg_wakeup ($is_source == "false") => Sleeping
			
		when ? broadcast => received do {
			schedule_dissemination (key, payload, covered)
		}
		
	state received
		when ? broadcast (key == $currentKey) within 200ms => received do { 
			schedule_dissemination ($currentKey, payload, covered)
		}
		
		when timeout => Sleeping do { 
			disseminate ($currentKey)
		}
		
	state still_sending
		when zero_remaining_broadcasts within 1800ms => stop 
		when timeout => still_sending do {
			initial_dissemination ("This is a message")
		}
		
	state stop


/* automaton used to build set of find set of neighbors */
automaton Phase0
	initial state greeting
		when ? hello within 100ms => greeting do {
			store (sender, x, y)
		}
		
		when timeout => s_check do {
			decrease_hellos
			! hello (x = $posX, y = $posY) @ *
		}

	urgent state s_check
		when zero_nr_hellos => s0 
		when no_zero_nr_hellos => greeting

	state s0
		when ? hello  within 100ms => s0 do { 
			store (sender, x, y)
		}
		
		when false within 7s => s0
		when timeout => initialized

	urgent state initialized do { 
			! msg_wakeup @ MainPhase
		}
		when true => done 
	
	state done
