/*
 * generated by Xtext 2.9.0
 */
package fr.labri.gossip.tima.ui.outline

import com.google.inject.Inject
import fr.labri.gossip.tima.dSL.Action
import fr.labri.gossip.tima.dSL.CompoundAction
import fr.labri.gossip.tima.dSL.State
import fr.labri.gossip.tima.dSL.Transition
import org.eclipse.jface.viewers.StyledString
import org.eclipse.swt.SWT
import org.eclipse.swt.graphics.RGB
import org.eclipse.xtext.ui.IImageHelper
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider
import org.eclipse.xtext.ui.editor.utils.TextStyle
import org.eclipse.xtext.ui.label.StylerFactory

/**
 * Customization of the default outline structure.
 *
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#outline
 */
class DSLOutlineTreeProvider extends DefaultOutlineTreeProvider {
 	@Inject 
	StylerFactory stylerFactory;
	
	@Inject
    private IImageHelper imageHelper;
	
	
	def _text(Transition t) {
		val x = new StyledString()
		appendNiceText(x, 'transition')
		if (t.target != null) {
			x.append(' to ')
			appendBlackText(x, '''«t.target.name»''')
		}
		x
	}
	
	def appendBlackText(StyledString s, String newString) {
		s.append(newString, stylerFactory.createXtextStyleAdapterStyler(typeTextStyle2))
		s
	}
	
	def appendNiceText(StyledString s, String newString) {
		s.append(newString, stylerFactory.createXtextStyleAdapterStyler(typeTextStyle1))
		s
	}
	
	def _text(Action a) {
		val x = new StyledString()
		val s = if (a == null) x.append('empty') else {
			if (a.externalAction != null)
				x.appendBlackText('''«a.externalAction.name»''')
			else if (a.msg != null && a.msg.msg != null && a.msg.target != null) { // TODO remote message
				x.appendNiceText('Send message ').appendBlackText('''«a.msg.msg.msg.name»''').append(' to ').appendBlackText('''«a.msg.target.name»''')
			}
			else { // buildin
				x.append('unknown')
			}
		}
		s
	}
 
	def getTypeTextStyle1() {
	  val textStyle = new TextStyle()
	  textStyle.setColor(new RGB(149, 125, 71))
	  textStyle.setStyle(SWT.ITALIC)
	  textStyle
	}
	
	def getTypeTextStyle2() {
	  val textStyle = new TextStyle()
	  textStyle.setColor(new RGB(20, 20, 20))
	  textStyle.setStyle(SWT.BOLD)
	  textStyle
	}

	def _createChildren(CompoundAction s, Action a) {
		// nothing to create
	}
	
	def _isLeaf(Action a) {
		true
	}

	def _createChildren(State s, Transition t) {
		// nothing to create
	}

	def _isLeaf(Transition t) {
		true
	}
}
