/*
 * generated by Xtext 2.9.0
 */
package fr.labri.gossip.tima.ui.labeling

import com.google.inject.Inject
import fr.labri.gossip.tima.dSL.Action
import fr.labri.gossip.tima.dSL.Automata
import fr.labri.gossip.tima.dSL.Transition
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider
import org.eclipse.xtext.ui.IImageHelper
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider

/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#label-provider
 */
class DSLLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
    private IImageHelper imageHelper;

	@Inject
	new(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	// Labels and icons can be computed like this:
	
	def text(Action ele) {
		val s = if (ele == null) 'empty' else {
		if (ele.externalAction != null)
			'''C++: «ele.externalAction.name»'''
		else if (ele.msgAction != null) 
			'''Send message "«ele.msgAction.type.name»" to "«ele.msgAction.target.name»"'''
		} // TODO builin
		s
	}
	
	def text(Transition t){
		val s = '''transition to «t.target.name»'''	
		s
	}
	
	def image(Action a) {
		imageHelper.getImage(
			if (a.externalAction != null)
				"action.png"
			else
				"send.png"
		)
    }
    
    def image(Transition t) {
		imageHelper.getImage(
			if (t.guards.msgGuard != null)
				"receive.png"
			else if (t.guards.externalGuard != null)
				"action.png"
			else
				"clock.png"
		)
    }
    
    def image(Automata s) {
		imageHelper.getImage('automata.png')
    }
}
