/*
 * generated by Xtext 2.9.0
 */
package fr.labri.gossip.tima.ui.labeling

import com.google.inject.Inject
import fr.labri.gossip.tima.dSL.Action
import fr.labri.gossip.tima.dSL.Automata
import fr.labri.gossip.tima.dSL.Transition
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider
import org.eclipse.xtext.ui.IImageHelper
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider
import fr.labri.gossip.tima.dSL.BuiltinAction
import fr.labri.gossip.tima.dSL.ExternalAction
import fr.labri.gossip.tima.dSL.MessageAction
import fr.labri.gossip.tima.dSL.TimeoutTransition
import fr.labri.gossip.tima.dSL.GuardedTransition
import fr.labri.gossip.tima.dSL.Guard
import fr.labri.gossip.tima.dSL.MessageGuard
import fr.labri.gossip.tima.dSL.BuiltInGuard
import fr.labri.gossip.tima.dSL.ExternalGuard

/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#label-provider
 */
class DSLLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
    private IImageHelper imageHelper;

	@Inject
	new(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	// Labels and icons can be computed like this:
	def text(MessageAction action) '''
	Send «action.type.name»
	'''
	
	def text(BuiltinAction action ){
		action.name
	}
	
	def text(ExternalAction action ){
		action.name
	}
	

	def image(ExternalAction a) {
		imageHelper.getImage("action.png")
    }
    
    def image(BuiltinAction a) {
		imageHelper.getImage("action.png")
    }
    
    def image(MessageAction a) {
		imageHelper.getImage("send.png")
    }
    
    def text(Transition t){
		'''transition to «t.target.name»'''	
	}
	
	def image(TimeoutTransition t) {
		imageHelper.getImage("clock.png")
	}
    
    def image(GuardedTransition t) {
		imageHelper.getImage(t.guard.iconName)
    }
	
	dispatch def String iconName(MessageGuard guard) {
		"receive.png"
	}
	
	dispatch def String iconName(BuiltInGuard guard) {
		"action.png"
	}
	
	dispatch def String iconName(ExternalGuard guard) {
		"action.png"
	}
	
    
    def image(Automata s) {
		imageHelper.getImage('automata.png')
    }
}
