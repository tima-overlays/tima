/*
 * generated by Xtext 2.9.0
 */
package fr.labri.tima.generator

import com.google.inject.Inject
import fr.labri.tima.dSL.Header
import fr.labri.tima.semantic.DSLSemantic
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.core.resources.ResourcesPlugin
import org.eclipse.core.runtime.QualifiedName
import java.util.HashSet
import fr.labri.tima.Util

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class DSLGenerator2 extends AbstractGenerator {

	@Inject
	extension DSLSemantic dslSemantic;

	private val KEY_TARGETS = new QualifiedName("Tima DSL", "Generated Target"); // FIXME remove-me quickly

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val automata = dslSemantic.toIR(resource)
		val name = resource.allContents.filter(Header).toList.get(0).name

		val iresource = ResourcesPlugin.getWorkspace().getRoot().findMember(resource.URI.toPlatformString(true)); // FIXME more than ugly
		val targets = Util.unserialize(iresource.project.getPersistentProperty(KEY_TARGETS), new HashSet<String>());
		for (String target: targets)
			try {
				println('''Calling «target» generator''')
				Generators.getGenerator(target, automata).generateFiles(name, fsa, context)
			} catch(Exception e) {
				System.err.println("Unable to call generator " + target)
				System.err.println(e)
				e.printStackTrace
			}
	}
}
