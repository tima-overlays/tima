/*
 * generated by Xtext 2.9.0
 */
package fr.labri.gossip.tima.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import fr.labri.gossip.tima.dSL.Action
import fr.labri.gossip.tima.dSL.DSLPackage
import org.eclipse.xtext.EcoreUtil2
import fr.labri.gossip.tima.dSL.Message
import org.eclipse.xtext.scoping.Scopes
import fr.labri.gossip.tima.dSL.MessageType
import fr.labri.gossip.tima.dSL.Automata

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class DSLScopeProvider extends AbstractDSLScopeProvider {
	

  override getScope(EObject context, EReference reference) {
      if(context instanceof MessageType
          && reference == DSLPackage.Literals.MESSAGE_TYPE__MSG){
        val rootElement = EcoreUtil2.getRootContainer(context);
        val candidates = EcoreUtil2.getAllContentsOfType(rootElement, Message);
        val existingScope = Scopes.scopeFor(candidates);
        // Scope that filters out the context element from the candidates list
        
        return existingScope;
      }
      else if (context instanceof Action && reference == DSLPackage.Literals.ACTION__TARGET){
      	val rootElement = EcoreUtil2.getRootContainer(context);
        val candidates = EcoreUtil2.getAllContentsOfType(rootElement, Automata);
        val existingScope = Scopes.scopeFor(candidates);
        return existingScope;
      }
  
      return super.getScope(context, reference);
  }
}
