/*
 * generated by Xtext 2.9.0
 */
package fr.labri.gossip.tima.generator

import com.google.inject.Inject
import fr.labri.gossip.tima.dSL.Header
import fr.labri.gossip.tima.semantic.DSLSemantic
import fr.labri.gossip.tima.semantic.TimaAction.SimpleTimaAction
import fr.labri.tima.CompiledTimedAutomata
import fr.labri.tima.ITimedAutomata
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class DSLGenerator extends AbstractGenerator {

	@Inject
	extension DSLSemantic dslSemantic;

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val automata = dslSemantic.toIR(resource)
		val name = resource.allContents.filter(Header).toList.get(0).name

		new DotGenerator().generateFiles(automata, name, fsa, context)		
		new NativeGenerator().generateFiles(automata, name, fsa, context)
		
	}
	
	def actionStep(SimpleTimaAction<String> act_simple)
		'''«IF act_simple.isMessage»
		ctx2 = new tima::SendTimaContext(«act_simple.msg_id», «act_simple.src_id», "«act_simple.automaton_dst»", ctx->get_device_name(), ctx->get_user_data());
		«act_simple»(name, ctx2);
		free(ctx2);
		«ELSE»
		«act_simple»(name, ctx);
		«ENDIF»'''
	
	def numberOfFollowers(ITimedAutomata<String> a, ITimedAutomata.State<String> s) {
		a.getFollowers(s).length - (if (a.asCompiled.getTimeoutDestination(s) != -1) 1 else 0)
	}
	
	def asCompiled(ITimedAutomata<String> a) {
		a as CompiledTimedAutomata<String>
	}
	
}
