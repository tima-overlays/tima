/*
 * generated by Xtext 2.9.0
 */
package fr.labri.tima.ui.outline

import com.google.inject.Inject
import fr.labri.tima.dSL.Action
import fr.labri.tima.dSL.ExternalAction
import fr.labri.tima.dSL.MessageAction
import fr.labri.tima.dSL.State
import fr.labri.tima.dSL.Transition
import org.eclipse.jface.viewers.StyledString
import org.eclipse.swt.SWT
import org.eclipse.swt.graphics.RGB
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider
import org.eclipse.xtext.ui.editor.utils.TextStyle
import org.eclipse.xtext.ui.label.StylerFactory
import fr.labri.tima.dSL.MessageType

/**
 * Customization of the default outline structure.
 *
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#outline
 */
class DSLOutlineTreeProvider extends DefaultOutlineTreeProvider {
 	@Inject
	StylerFactory stylerFactory;



	def _text(Transition t) {
		val x = new StyledString()
		appendNiceText(x, 'transition')
		if (t.target != null) {
			x.append(' to ')
			appendBlackText(x, '''«t.target.name»''')
		}
		x
	}

	def appendBlackText(StyledString s, String newString) {
		s.append(newString, stylerFactory.createXtextStyleAdapterStyler(typeTextStyle2))
    s
	}

	def appendNiceText(StyledString s, String newString) {
		s.append(newString, stylerFactory.createXtextStyleAdapterStyler(typeTextStyle1))
    s
	}

	def _text(ExternalAction a) {
		val x = new StyledString()
		x.appendBlackText(a.name)
    }

    def _text(MessageAction a) {
		val x = new StyledString()
		x.appendNiceText('Send message ')//.appendBlackText(a.type.name)
    }

	def getTypeTextStyle1() {
	  val textStyle = new TextStyle()
	  textStyle.setColor(new RGB(149, 125, 71))
	  textStyle.setStyle(SWT.ITALIC)
	  textStyle
	}

	def _text(MessageType msg) {
		val x = new StyledString()
		x.appendBlackText(msg.name)
    }

	def getTypeTextStyle2() {
	  val textStyle = new TextStyle()
	  textStyle.setColor(new RGB(20, 20, 20))
	  textStyle.setStyle(SWT.BOLD)
	  textStyle
	}

	def _createChildren(Action s, Action a) {
		// nothing to create
	}

	def _isLeaf(Action a) {
		true
	}

	def _createChildren(State s, Transition t) {
		// nothing to create
	}

	def _isLeaf(Transition t) {
		true
	}
}
