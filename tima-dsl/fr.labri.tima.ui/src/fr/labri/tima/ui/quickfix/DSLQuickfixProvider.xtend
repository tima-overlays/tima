/*
 * generated by Xtext 2.9.0
 */
package fr.labri.tima.ui.quickfix

import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider
import org.eclipse.xtext.ui.editor.quickfix.Fix
import fr.labri.tima.validation.DSLValidator
import org.eclipse.xtext.validation.Issue
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor

/**
 * Custom quickfixes.
 *
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#quick-fixes
 */
class DSLQuickfixProvider extends DefaultQuickfixProvider {

	@Fix(DSLValidator.INVALID_MODIFIER)
	def capitalizeName(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 'Repeated modifier', 'Remove repeated modifier.', 'upcase.png') [
			context |
			val xtextDocument = context.xtextDocument
//			val modifier = xtextDocument.get(issue.offset, issue.length)
			xtextDocument.replace(issue.offset, issue.length+1, "") // +1 is to remove a space
		]
	}
	
	@Fix(DSLValidator.DUPLICATED_STATE_NAME)
	def duplicatedStateName(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 'Duplicated State Name', 'Duplicated State Name. Rename State.', 'upcase.png') [
			context |
			val xtextDocument = context.xtextDocument
			val name = xtextDocument.get(issue.offset, issue.length) + "_0"
			xtextDocument.replace(issue.offset, issue.length, name) // +1 is to remove a space
		]
	}
	
	@Fix(DSLValidator.DUPLICATED_MESSAGE_NAME)
	def duplicatedMessageName(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 'Duplicated Message Name', 'Duplicated Message Name. Rename Message.', 'upcase.png') [
			context |
			val xtextDocument = context.xtextDocument
			val name = xtextDocument.get(issue.offset, issue.length) + "_0"
			xtextDocument.replace(issue.offset, issue.length, name) // +1 is to remove a space
		]
	}
}
