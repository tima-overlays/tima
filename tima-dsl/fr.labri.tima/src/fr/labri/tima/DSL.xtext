grammar fr.labri.tima.DSL with org.eclipse.xtext.common.Terminals

generate dSL "http://www.labri.fr/tima/DSL"

Model:
	header=Header
	dependencies+=Dependency*
	protocols+=ProtocolSection*
	messageSections+=MessageSection*
	externalActions+=ExternalActionDeclaration*
	automatons+=Automaton*
;

Dependency:
	'require' importedNamespace=ID
;


Header:
	TK_MODULE name=ID
	Summary?
;

fragment
Summary : TK_SUMMARY summary=STRING;


MessageSection:
	name=ID TK_MESSAGES '{' messages+=MessageType* '}'
;

ProtocolSection:
	TK_PROTOCOL name=ID '{' fields+=Field (',' fields+=Field)* '}'
;

MessageType:
	name=ID ('{' FieldDeclaration '}' )?
;

fragment
FieldDeclaration:
	declaredFields+=ID (',' declaredFields+=ID)*
;

ExternalActionDeclaration:
	TK_EXTERNAL_ACTIONS ExternalActionType name=ID '('  (paramType+=ExternalActionParam (',' paramType+=ExternalActionParam)* )?   ')' ';'
;

ExternalActionParam:
	 ExternalActionType name=ID
;

fragment
ExternalActionType:
	void?='void'? & int?='int'? & string?='string'? & Bool?='bool'?
;

Automaton:
	{SimpleAutomaton} TK_AUTOMATON name=ID Summary? states+=State* |
	{AutomatonInstance} TK_AUTOMATON name=ID '=' template=[AutomatonTemplate] '(' params+=ID (',' params+=ID )* ')' |
	{AutomatonTemplate} TK_TEMPLATE TK_AUTOMATON name=ID '(' params+=ID (',' params+=ID )* ')' Summary? states+=State*
;

State:
	StateModifiers TK_STATE name=ID Actions? transitions+=Transition*
;

fragment
StateModifiers:
	urgent?='urgent'? & initial?='initial'? & final?='final'?;

fragment
Actions:
	TK_ACTION '{' actions+=Action+ '}' |
	TK_ACTION actions+=Action
;

Action returns Action:
//	 BuiltinAction ';'? |
	 ExternalAction ';'? |
	 MessageAction ';'? |
	 IfAction |
	 AssignmentAction
;

fragment
Fields:
	fields+=Field (',' fields+=Field)*
;

Field:
	name=ID '=' value=Expression
;

//BuiltinAction returns Action:
//	{BuiltinAction} name=ID ('(' Expressions ')')?
//;

ExternalAction returns Action:
	{ExternalAction} name=EXTERNAL_NAME ('(' Expressions ')')?
;

MessageAction returns Action:
	{MessageAction} '!' type=[MessageType] ('(' Fields ')')? '@' target=MessageTarget
;

IfAction returns Action:
	{IfAction} TK_IF '(' condition=Expression ')' '{' actions+=Action+ '}'
;

AssignmentAction returns Action:
	{AssignmentAction} key=StoredValue '=' value=Expression ';'?
;

MessageTarget:
	{BroadcastTarget} '*' |
	{UnicastTarget} address=Expression | 
	{LocalUnicastTarget} address=ID
//	{InternalTarget} automata=[Automaton]
;

Transition returns Transition:
	TK_GUARD (
		{TimeoutTransition} timeout?='timeout' |
		{GuardedTransition} guard=Guard
	) '=>' target=[State]
	Actions?
;

Guard returns Guard:
	(	MessageGuard|
//		BuiltinGuard |
		ExternalGuard |
		BooleanGuard)
	(within ?= 'within' value=INT unit=TimeUnit)?
;

BooleanGuard returns Guard:
	{BooleanGuard} predicate=Expression
;

ExternalGuard returns Guard:
	{ExternalGuard} name=EXTERNAL_NAME ('(' Expressions ')')?
;

MessageGuard returns Guard:
	{MessageGuard} '?'
	msgPattern=MessagePattern
;

//BuiltinGuard returns Guard:
//	{BuiltInGuard} name=ID ('(' Expressions ')')?
//;

MessagePattern:
	type=[MessageType]
	( predicate=Expression )?
;

fragment
Patterns:
	patterns+=Expression (',' patterns+=Expression)*
;

fragment
Expressions:
	operands+=Expression (',' operands+=Expression)*
;

StoredValue:
	'$' sections+=StoredValueSection ('.' sections+=StoredValueSection )*
;

StoredValueSection:
	key=ID ('[' index=Expression ']')?
;

Expression:
    BooleanExpression;

BooleanExpression returns Expression:
    Comparison 
    (({AndOrExpression.left=current} op=("||"|"&&")) right=Comparison)*;

Comparison returns Expression:
       Addition
       (({Comparison.left=current} op=("<"|">"|">="|"<="|"=="|"!=") ) right=Addition)*;
 
Addition returns Expression:
    Multiplication
    ({PlusMinus.left=current} op=('+'|'-') right=Multiplication)*; 

Multiplication returns Expression:
    Prefixed (({MultiOrDiv.left=current} op=("*"|"/")) right=Prefixed)*;

Prefixed returns Expression:
    {BooleanNegation} =>op="!" expression=Atomic | /* right associativity */
    {ArithmeticSigned} =>op="-" expression=Atomic | /* right associativity */ 
    {Atomic} atomic=Atomic
;

Atomic returns Expression:
    {GroupExpression} '(' group=Expression ')' |
    {NumericExpression} value=INT |
    {StringExpression} value=STRING | 
    {BooleanExpression} (valueTrue?=TK_TRUE | valueFalse?=TK_FALSE) |
    {FieldExpression} type=[MessageType] '.' field = ID |
    {CheckIfValueDefined} (defined?=TK_DEFINED | undefined?=TK_UNDEFINED) key=StoredValue |
    {KeyInStore} key=StoredValue |
    {ExternalCallExpression} function=[ExternalActionDeclaration] ( '(' Expressions? ')' )
;

enum TimeUnit: MSEC='ms' | SEC='s';

terminal TK_AUTOMATON: 'automaton';
terminal TK_STATE: 'state';
terminal TK_ACTION: 'do';
terminal TK_GUARD: 'when';
terminal TK_MODULE: 'module';
terminal TK_SUMMARY: 'summary';
terminal TK_MESSAGES: 'messages';
terminal TK_PROTOCOL: 'protocol';
terminal TK_TRUE: 'true';
terminal TK_FALSE: 'false';
terminal TK_DEFINED: 'defined';
terminal TK_UNDEFINED: 'undefined';
terminal TK_IF: 'if';
terminal TK_EXTERNAL_ACTIONS: 'extern';
terminal TK_TEMPLATE: 'template';

terminal EXTERNAL_NAME:  '`' ( '\\' . | !('\\'|'`') )* '`';
