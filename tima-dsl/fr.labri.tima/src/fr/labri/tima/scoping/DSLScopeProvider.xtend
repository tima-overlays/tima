/*
 * generated by Xtext 2.9.0
 */
package fr.labri.tima.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import fr.labri.tima.dSL.Action
import fr.labri.tima.dSL.DSLPackage
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.Scopes
import fr.labri.tima.dSL.MessagePattern
import fr.labri.tima.dSL.Automaton

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class DSLScopeProvider extends fr.labri.tima.scoping.AbstractDSLScopeProvider {
	

  override getScope(EObject context, EReference reference) {
//      if(context instanceof MessagePattern
//          && reference == DSLPackage.Literals.MESSAGE_PATTERN__TYPE){
//        val rootElement = EcoreUtil2.getRootContainer(context);
//        val candidates = EcoreUtil2.getAllContentsOfType(rootElement, MessageType);
//        val existingScope = Scopes.scopeFor(candidates);
//        // Scope that filters out the context element from the candidates list
//        
//        return existingScope;
//      }
//      else if (context instanceof Action && reference == DSLPackage.Literals.MESSAGE_ACTION__TYPE){
//      	val rootElement = EcoreUtil2.getRootContainer(context);
//        val candidates = EcoreUtil2.getAllContentsOfType(rootElement, Automaton);
//        val existingScope = Scopes.scopeFor(candidates);
//        return existingScope;
//      }
  
      return super.getScope(context, reference);
  }
}
