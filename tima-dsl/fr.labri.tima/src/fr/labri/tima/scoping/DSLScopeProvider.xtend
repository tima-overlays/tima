/*
 * generated by Xtext 2.9.0
 */
package fr.labri.tima.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import fr.labri.tima.dSL.Action
import fr.labri.tima.dSL.DSLPackage
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.Scopes
import fr.labri.tima.dSL.MessagePattern
import fr.labri.tima.dSL.Automaton
import fr.labri.tima.dSL.MessageType
import fr.labri.tima.dSL.ExternalAction
import fr.labri.tima.dSL.ExternalActionDeclaration

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class DSLScopeProvider extends fr.labri.tima.scoping.AbstractDSLScopeProvider {
	

  override getScope(EObject context, EReference reference) {
  	val rootElement = EcoreUtil2.getRootContainer(context)
  	switch (reference) {
//  		case DSLPackage.Literals.MESSAGE_ACTION__TYPE,
//  		case DSLPackage.Literals.FIELD_EXPRESSION__TYPE,
//  		case DSLPackage.Literals.MESSAGE_PATTERN__TYPE: 
//  		{
//        	val candidates = EcoreUtil2.getAllContentsOfType(rootElement, MessageType)
//        	Scopes.scopeFor(candidates)
//  		}
  		case DSLPackage.Literals.MESSAGE_ACTION__TARGET: {
  			val candidates = EcoreUtil2.getAllContentsOfType(rootElement, Automaton)
        	Scopes.scopeFor(candidates)
  		}
  		case DSLPackage.Literals.EXTERNAL_CALL_EXPRESSION__FUNCTION: {
        	val candidates = EcoreUtil2.getAllContentsOfType(rootElement, ExternalActionDeclaration)
        	Scopes.scopeFor(candidates)
  		}
  		default: {
  			super.getScope(context, reference)
  		}
  	}
  }
}
