module simple_gossip_push
summary "This is a good implementation (because it's made by Inti) ;)"

// local messages
gossip_time
hello_time 
new_rumor_time

// remote messages
hello
rumor

automaton Main
	initial state w
		when ? hello within 1000 msec => s_remembering_hello
		when ? rumor within 1000 msec => s_taking_note_of_rumor
		when ? new_rumor_time within 1000 msec => s_new_gossiping
		when ? hello_time within 1000 msec => w
			do `C::greet`
		when ? gossip_time within 500 msec => s_gossiping
		when timeout => s_loop
		
	urgent state s_loop
		when true => w
		
	urgent state s_gossiping
		when `C::no_rumors_to_spread` within 1 sec => w
		when true => w
		do `C::gossip`
		
	urgent state s_new_gossiping 
		do
			`C::spread_new_rumor`
		when true => w 
		
	urgent state s_remembering_hello
		do
			`C::store_sender`
		when true => w
		
	urgent state s_taking_note_of_rumor
		do
			`C::store_rumor`
		when true => w
	
/**
 * This is a ticker. It regularly sends a message to the Main automaton.
 * Such a message is used to initiate a gossip phase
 */
automaton ticker_gossip 
	initial state s0
		when false within 700 msec => s2
		when timeout => s1
	urgent state s1
		do
			! gossip_time @ Main
		when true => s0
	state s2
		when false => s0
		
		
/**
 * This is a tricker. It regularly sends a message to the Main automaton.
 * Such a message is used to initiate a completely new rumor
 */
automaton ticker_newgossip
	initial state s0
		when false within 5000 msec => s2
		when timeout => s1
	urgent state s1
		do
			! new_rumor_time @ Main
		when true => s0
	state s2
		when false => s0 
		
/**
 * This is a ticker. It regularly sends a message to the Main automaton.
 * Such a message is used to initiate the process of saying hello to your neighbors.
 * In this example, we are assuming that the protocol is executed in a wireless environment
 * where nodes move. As a consequence, the device doesn't know who is listening.
 * A device sends 'hello' messages to to notify other participants of its existence. 
 */
automaton ticker_hello
	initial state s0
		when false within 1500 msec => s2
		when timeout => s1
	urgent state s1
		do
			! hello_time @ Main
		when true => s0
	state s2
		when false => s0
